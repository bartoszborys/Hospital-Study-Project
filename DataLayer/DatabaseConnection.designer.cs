#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="medical_clinic")]
	public partial class DatabaseConnectionContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertvisit(visit instance);
    partial void Updatevisit(visit instance);
    partial void Deletevisit(visit instance);
    partial void Insertdoctor(doctor instance);
    partial void Updatedoctor(doctor instance);
    partial void Deletedoctor(doctor instance);
    partial void Insertlab(lab instance);
    partial void Updatelab(lab instance);
    partial void Deletelab(lab instance);
    partial void Insertlab_dictionary(lab_dictionary instance);
    partial void Updatelab_dictionary(lab_dictionary instance);
    partial void Deletelab_dictionary(lab_dictionary instance);
    partial void Insertlab_examination(lab_examination instance);
    partial void Updatelab_examination(lab_examination instance);
    partial void Deletelab_examination(lab_examination instance);
    partial void Insertlab_manager(lab_manager instance);
    partial void Updatelab_manager(lab_manager instance);
    partial void Deletelab_manager(lab_manager instance);
    partial void Insertphys_examination(phys_examination instance);
    partial void Updatephys_examination(phys_examination instance);
    partial void Deletephys_examination(phys_examination instance);
    partial void Insertregistration(registration instance);
    partial void Updateregistration(registration instance);
    partial void Deleteregistration(registration instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertpatient(patient instance);
    partial void Updatepatient(patient instance);
    partial void Deletepatient(patient instance);
    #endregion
		
		public DatabaseConnectionContext() : 
				base(global::DataLayer.Properties.Settings.Default.medical_clinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<visit> visits
		{
			get
			{
				return this.GetTable<visit>();
			}
		}
		
		public System.Data.Linq.Table<doctor> doctors
		{
			get
			{
				return this.GetTable<doctor>();
			}
		}
		
		public System.Data.Linq.Table<lab> labs
		{
			get
			{
				return this.GetTable<lab>();
			}
		}
		
		public System.Data.Linq.Table<lab_dictionary> lab_dictionaries
		{
			get
			{
				return this.GetTable<lab_dictionary>();
			}
		}
		
		public System.Data.Linq.Table<lab_examination> lab_examinations
		{
			get
			{
				return this.GetTable<lab_examination>();
			}
		}
		
		public System.Data.Linq.Table<lab_manager> lab_managers
		{
			get
			{
				return this.GetTable<lab_manager>();
			}
		}
		
		public System.Data.Linq.Table<phys_examination> phys_examinations
		{
			get
			{
				return this.GetTable<phys_examination>();
			}
		}
		
		public System.Data.Linq.Table<registration> registrations
		{
			get
			{
				return this.GetTable<registration>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<patient> patients
		{
			get
			{
				return this.GetTable<patient>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.visit")]
	public partial class visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _description;
		
		private string _diagnosis;
		
		private string _status;
		
		private System.DateTime _registration_date;
		
		private System.Nullable<System.DateTime> _end_date;
		
		private int _registration_id;
		
		private int _doctor_id;
		
		private int _patient_id;
		
		private EntitySet<lab_examination> _lab_examinations;
		
		private EntitySet<phys_examination> _phys_examinations;
		
		private EntityRef<doctor> _doctor;
		
		private EntityRef<registration> _registration;
		
		private EntityRef<patient> _patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndiagnosisChanging(string value);
    partial void OndiagnosisChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void Onregistration_dateChanging(System.DateTime value);
    partial void Onregistration_dateChanged();
    partial void Onend_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onend_dateChanged();
    partial void Onregistration_idChanging(int value);
    partial void Onregistration_idChanged();
    partial void Ondoctor_idChanging(int value);
    partial void Ondoctor_idChanged();
    partial void Onpatient_idChanging(int value);
    partial void Onpatient_idChanged();
    #endregion
		
		public visit()
		{
			this._lab_examinations = new EntitySet<lab_examination>(new Action<lab_examination>(this.attach_lab_examinations), new Action<lab_examination>(this.detach_lab_examinations));
			this._phys_examinations = new EntitySet<phys_examination>(new Action<phys_examination>(this.attach_phys_examinations), new Action<phys_examination>(this.detach_phys_examinations));
			this._doctor = default(EntityRef<doctor>);
			this._registration = default(EntityRef<registration>);
			this._patient = default(EntityRef<patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(254)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnosis", DbType="VarChar(254)")]
		public string diagnosis
		{
			get
			{
				return this._diagnosis;
			}
			set
			{
				if ((this._diagnosis != value))
				{
					this.OndiagnosisChanging(value);
					this.SendPropertyChanging();
					this._diagnosis = value;
					this.SendPropertyChanged("diagnosis");
					this.OndiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registration_date", DbType="DateTime NOT NULL")]
		public System.DateTime registration_date
		{
			get
			{
				return this._registration_date;
			}
			set
			{
				if ((this._registration_date != value))
				{
					this.Onregistration_dateChanging(value);
					this.SendPropertyChanging();
					this._registration_date = value;
					this.SendPropertyChanged("registration_date");
					this.Onregistration_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registration_id", DbType="Int NOT NULL")]
		public int registration_id
		{
			get
			{
				return this._registration_id;
			}
			set
			{
				if ((this._registration_id != value))
				{
					if (this._registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onregistration_idChanging(value);
					this.SendPropertyChanging();
					this._registration_id = value;
					this.SendPropertyChanged("registration_id");
					this.Onregistration_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_id", DbType="Int NOT NULL")]
		public int doctor_id
		{
			get
			{
				return this._doctor_id;
			}
			set
			{
				if ((this._doctor_id != value))
				{
					if (this._doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondoctor_idChanging(value);
					this.SendPropertyChanging();
					this._doctor_id = value;
					this.SendPropertyChanged("doctor_id");
					this.Ondoctor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patient_id", DbType="Int NOT NULL")]
		public int patient_id
		{
			get
			{
				return this._patient_id;
			}
			set
			{
				if ((this._patient_id != value))
				{
					if (this._patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpatient_idChanging(value);
					this.SendPropertyChanging();
					this._patient_id = value;
					this.SendPropertyChanged("patient_id");
					this.Onpatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visit_lab_examination", Storage="_lab_examinations", ThisKey="id", OtherKey="visit_id")]
		public EntitySet<lab_examination> lab_examinations
		{
			get
			{
				return this._lab_examinations;
			}
			set
			{
				this._lab_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visit_phys_examination", Storage="_phys_examinations", ThisKey="id", OtherKey="visit_id")]
		public EntitySet<phys_examination> phys_examinations
		{
			get
			{
				return this._phys_examinations;
			}
			set
			{
				this._phys_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctor_visit", Storage="_doctor", ThisKey="doctor_id", OtherKey="id", IsForeignKey=true)]
		public doctor doctor
		{
			get
			{
				return this._doctor.Entity;
			}
			set
			{
				doctor previousValue = this._doctor.Entity;
				if (((previousValue != value) 
							|| (this._doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctor.Entity = null;
						previousValue.visits.Remove(this);
					}
					this._doctor.Entity = value;
					if ((value != null))
					{
						value.visits.Add(this);
						this._doctor_id = value.id;
					}
					else
					{
						this._doctor_id = default(int);
					}
					this.SendPropertyChanged("doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="registration_visit", Storage="_registration", ThisKey="registration_id", OtherKey="id", IsForeignKey=true)]
		public registration registration
		{
			get
			{
				return this._registration.Entity;
			}
			set
			{
				registration previousValue = this._registration.Entity;
				if (((previousValue != value) 
							|| (this._registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._registration.Entity = null;
						previousValue.visits.Remove(this);
					}
					this._registration.Entity = value;
					if ((value != null))
					{
						value.visits.Add(this);
						this._registration_id = value.id;
					}
					else
					{
						this._registration_id = default(int);
					}
					this.SendPropertyChanged("registration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="patient_visit", Storage="_patient", ThisKey="patient_id", OtherKey="id", IsForeignKey=true)]
		public patient patient
		{
			get
			{
				return this._patient.Entity;
			}
			set
			{
				patient previousValue = this._patient.Entity;
				if (((previousValue != value) 
							|| (this._patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._patient.Entity = null;
						previousValue.visits.Remove(this);
					}
					this._patient.Entity = value;
					if ((value != null))
					{
						value.visits.Add(this);
						this._patient_id = value.id;
					}
					else
					{
						this._patient_id = default(int);
					}
					this.SendPropertyChanged("patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.visit = this;
		}
		
		private void detach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.visit = null;
		}
		
		private void attach_phys_examinations(phys_examination entity)
		{
			this.SendPropertyChanging();
			entity.visit = this;
		}
		
		private void detach_phys_examinations(phys_examination entity)
		{
			this.SendPropertyChanging();
			entity.visit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.doctor")]
	public partial class doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _last_name;
		
		private string _npwz;
		
		private EntitySet<visit> _visits;
		
		private EntitySet<user> _users;
		
		private EntitySet<user> _users1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnnpwzChanging(string value);
    partial void OnnpwzChanged();
    #endregion
		
		public doctor()
		{
			this._visits = new EntitySet<visit>(new Action<visit>(this.attach_visits), new Action<visit>(this.detach_visits));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._users1 = new EntitySet<user>(new Action<user>(this.attach_users1), new Action<user>(this.detach_users1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[last name]", Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_npwz", DbType="NChar(10)")]
		public string npwz
		{
			get
			{
				return this._npwz;
			}
			set
			{
				if ((this._npwz != value))
				{
					this.OnnpwzChanging(value);
					this.SendPropertyChanging();
					this._npwz = value;
					this.SendPropertyChanged("npwz");
					this.OnnpwzChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctor_visit", Storage="_visits", ThisKey="id", OtherKey="doctor_id")]
		public EntitySet<visit> visits
		{
			get
			{
				return this._visits;
			}
			set
			{
				this._visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctor_user", Storage="_users", ThisKey="id", OtherKey="personel_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctor_user1", Storage="_users1", ThisKey="id", OtherKey="personel_id")]
		public EntitySet<user> users1
		{
			get
			{
				return this._users1;
			}
			set
			{
				this._users1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_visits(visit entity)
		{
			this.SendPropertyChanging();
			entity.doctor = this;
		}
		
		private void detach_visits(visit entity)
		{
			this.SendPropertyChanging();
			entity.doctor = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.doctor = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.doctor = null;
		}
		
		private void attach_users1(user entity)
		{
			this.SendPropertyChanging();
			entity.doctor1 = this;
		}
		
		private void detach_users1(user entity)
		{
			this.SendPropertyChanging();
			entity.doctor1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lab")]
	public partial class lab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _last_name;
		
		private EntitySet<lab_examination> _lab_examinations;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    #endregion
		
		public lab()
		{
			this._lab_examinations = new EntitySet<lab_examination>(new Action<lab_examination>(this.attach_lab_examinations), new Action<lab_examination>(this.detach_lab_examinations));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[last name]", Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_lab_examination", Storage="_lab_examinations", ThisKey="id", OtherKey="lab_id")]
		public EntitySet<lab_examination> lab_examinations
		{
			get
			{
				return this._lab_examinations;
			}
			set
			{
				this._lab_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_user", Storage="_users", ThisKey="id", OtherKey="personel_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab = this;
		}
		
		private void detach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.lab = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.lab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lab_dictionary")]
	public partial class lab_dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private char _type;
		
		private string _name;
		
		private EntitySet<lab_examination> _lab_examinations;
		
		private EntitySet<phys_examination> _phys_examinations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OntypeChanging(char value);
    partial void OntypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public lab_dictionary()
		{
			this._lab_examinations = new EntitySet<lab_examination>(new Action<lab_examination>(this.attach_lab_examinations), new Action<lab_examination>(this.detach_lab_examinations));
			this._phys_examinations = new EntitySet<phys_examination>(new Action<phys_examination>(this.attach_phys_examinations), new Action<phys_examination>(this.detach_phys_examinations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Char(1) NOT NULL")]
		public char type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(254) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_dictionary_lab_examination", Storage="_lab_examinations", ThisKey="code", OtherKey="dictionary_code")]
		public EntitySet<lab_examination> lab_examinations
		{
			get
			{
				return this._lab_examinations;
			}
			set
			{
				this._lab_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_dictionary_phys_examination", Storage="_phys_examinations", ThisKey="code", OtherKey="dictionary_code")]
		public EntitySet<phys_examination> phys_examinations
		{
			get
			{
				return this._phys_examinations;
			}
			set
			{
				this._phys_examinations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab_dictionary = this;
		}
		
		private void detach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab_dictionary = null;
		}
		
		private void attach_phys_examinations(phys_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab_dictionary = this;
		}
		
		private void detach_phys_examinations(phys_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab_dictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lab_examination")]
	public partial class lab_examination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _doctor_note;
		
		private System.Nullable<System.DateTime> _order_date;
		
		private string _result;
		
		private string _manager_note;
		
		private string _status;
		
		private int _visit_id;
		
		private string _dictionary_code;
		
		private System.Nullable<int> _manager_id;
		
		private System.Nullable<int> _lab_id;
		
		private EntityRef<lab> _lab;
		
		private EntityRef<lab_dictionary> _lab_dictionary;
		
		private EntityRef<visit> _visit;
		
		private EntityRef<lab_manager> _lab_manager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondoctor_noteChanging(string value);
    partial void Ondoctor_noteChanged();
    partial void Onorder_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onorder_dateChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void Onmanager_noteChanging(string value);
    partial void Onmanager_noteChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void Onvisit_idChanging(int value);
    partial void Onvisit_idChanged();
    partial void Ondictionary_codeChanging(string value);
    partial void Ondictionary_codeChanged();
    partial void Onmanager_idChanging(System.Nullable<int> value);
    partial void Onmanager_idChanged();
    partial void Onlab_idChanging(System.Nullable<int> value);
    partial void Onlab_idChanged();
    #endregion
		
		public lab_examination()
		{
			this._lab = default(EntityRef<lab>);
			this._lab_dictionary = default(EntityRef<lab_dictionary>);
			this._visit = default(EntityRef<visit>);
			this._lab_manager = default(EntityRef<lab_manager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_note", DbType="VarChar(254)")]
		public string doctor_note
		{
			get
			{
				return this._doctor_note;
			}
			set
			{
				if ((this._doctor_note != value))
				{
					this.Ondoctor_noteChanging(value);
					this.SendPropertyChanging();
					this._doctor_note = value;
					this.SendPropertyChanged("doctor_note");
					this.Ondoctor_noteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_order_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> order_date
		{
			get
			{
				return this._order_date;
			}
			set
			{
				if ((this._order_date != value))
				{
					this.Onorder_dateChanging(value);
					this.SendPropertyChanging();
					this._order_date = value;
					this.SendPropertyChanged("order_date");
					this.Onorder_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="VarChar(254)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager_note", DbType="VarChar(254)")]
		public string manager_note
		{
			get
			{
				return this._manager_note;
			}
			set
			{
				if ((this._manager_note != value))
				{
					this.Onmanager_noteChanging(value);
					this.SendPropertyChanging();
					this._manager_note = value;
					this.SendPropertyChanged("manager_note");
					this.Onmanager_noteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visit_id", DbType="Int NOT NULL")]
		public int visit_id
		{
			get
			{
				return this._visit_id;
			}
			set
			{
				if ((this._visit_id != value))
				{
					if (this._visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onvisit_idChanging(value);
					this.SendPropertyChanging();
					this._visit_id = value;
					this.SendPropertyChanged("visit_id");
					this.Onvisit_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dictionary_code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string dictionary_code
		{
			get
			{
				return this._dictionary_code;
			}
			set
			{
				if ((this._dictionary_code != value))
				{
					if (this._lab_dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondictionary_codeChanging(value);
					this.SendPropertyChanging();
					this._dictionary_code = value;
					this.SendPropertyChanged("dictionary_code");
					this.Ondictionary_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager_id", DbType="Int")]
		public System.Nullable<int> manager_id
		{
			get
			{
				return this._manager_id;
			}
			set
			{
				if ((this._manager_id != value))
				{
					if (this._lab_manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmanager_idChanging(value);
					this.SendPropertyChanging();
					this._manager_id = value;
					this.SendPropertyChanged("manager_id");
					this.Onmanager_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lab_id", DbType="Int")]
		public System.Nullable<int> lab_id
		{
			get
			{
				return this._lab_id;
			}
			set
			{
				if ((this._lab_id != value))
				{
					if (this._lab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlab_idChanging(value);
					this.SendPropertyChanging();
					this._lab_id = value;
					this.SendPropertyChanged("lab_id");
					this.Onlab_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_lab_examination", Storage="_lab", ThisKey="lab_id", OtherKey="id", IsForeignKey=true)]
		public lab lab
		{
			get
			{
				return this._lab.Entity;
			}
			set
			{
				lab previousValue = this._lab.Entity;
				if (((previousValue != value) 
							|| (this._lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lab.Entity = null;
						previousValue.lab_examinations.Remove(this);
					}
					this._lab.Entity = value;
					if ((value != null))
					{
						value.lab_examinations.Add(this);
						this._lab_id = value.id;
					}
					else
					{
						this._lab_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("lab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_dictionary_lab_examination", Storage="_lab_dictionary", ThisKey="dictionary_code", OtherKey="code", IsForeignKey=true)]
		public lab_dictionary lab_dictionary
		{
			get
			{
				return this._lab_dictionary.Entity;
			}
			set
			{
				lab_dictionary previousValue = this._lab_dictionary.Entity;
				if (((previousValue != value) 
							|| (this._lab_dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lab_dictionary.Entity = null;
						previousValue.lab_examinations.Remove(this);
					}
					this._lab_dictionary.Entity = value;
					if ((value != null))
					{
						value.lab_examinations.Add(this);
						this._dictionary_code = value.code;
					}
					else
					{
						this._dictionary_code = default(string);
					}
					this.SendPropertyChanged("lab_dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visit_lab_examination", Storage="_visit", ThisKey="visit_id", OtherKey="id", IsForeignKey=true)]
		public visit visit
		{
			get
			{
				return this._visit.Entity;
			}
			set
			{
				visit previousValue = this._visit.Entity;
				if (((previousValue != value) 
							|| (this._visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._visit.Entity = null;
						previousValue.lab_examinations.Remove(this);
					}
					this._visit.Entity = value;
					if ((value != null))
					{
						value.lab_examinations.Add(this);
						this._visit_id = value.id;
					}
					else
					{
						this._visit_id = default(int);
					}
					this.SendPropertyChanged("visit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_manager_lab_examination", Storage="_lab_manager", ThisKey="manager_id", OtherKey="id", IsForeignKey=true)]
		public lab_manager lab_manager
		{
			get
			{
				return this._lab_manager.Entity;
			}
			set
			{
				lab_manager previousValue = this._lab_manager.Entity;
				if (((previousValue != value) 
							|| (this._lab_manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lab_manager.Entity = null;
						previousValue.lab_examinations.Remove(this);
					}
					this._lab_manager.Entity = value;
					if ((value != null))
					{
						value.lab_examinations.Add(this);
						this._manager_id = value.id;
					}
					else
					{
						this._manager_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("lab_manager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lab_manager")]
	public partial class lab_manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _last_name;
		
		private EntitySet<lab_examination> _lab_examinations;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    #endregion
		
		public lab_manager()
		{
			this._lab_examinations = new EntitySet<lab_examination>(new Action<lab_examination>(this.attach_lab_examinations), new Action<lab_examination>(this.detach_lab_examinations));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_manager_lab_examination", Storage="_lab_examinations", ThisKey="id", OtherKey="manager_id")]
		public EntitySet<lab_examination> lab_examinations
		{
			get
			{
				return this._lab_examinations;
			}
			set
			{
				this._lab_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_manager_user", Storage="_users", ThisKey="id", OtherKey="personel_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab_manager = this;
		}
		
		private void detach_lab_examinations(lab_examination entity)
		{
			this.SendPropertyChanging();
			entity.lab_manager = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.lab_manager = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.lab_manager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.phys_examination")]
	public partial class phys_examination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _result;
		
		private int _visit_id;
		
		private string _dictionary_code;
		
		private EntityRef<lab_dictionary> _lab_dictionary;
		
		private EntityRef<visit> _visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void Onvisit_idChanging(int value);
    partial void Onvisit_idChanged();
    partial void Ondictionary_codeChanging(string value);
    partial void Ondictionary_codeChanged();
    #endregion
		
		public phys_examination()
		{
			this._lab_dictionary = default(EntityRef<lab_dictionary>);
			this._visit = default(EntityRef<visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="VarChar(254)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visit_id", DbType="Int NOT NULL")]
		public int visit_id
		{
			get
			{
				return this._visit_id;
			}
			set
			{
				if ((this._visit_id != value))
				{
					if (this._visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onvisit_idChanging(value);
					this.SendPropertyChanging();
					this._visit_id = value;
					this.SendPropertyChanged("visit_id");
					this.Onvisit_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dictionary_code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string dictionary_code
		{
			get
			{
				return this._dictionary_code;
			}
			set
			{
				if ((this._dictionary_code != value))
				{
					if (this._lab_dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondictionary_codeChanging(value);
					this.SendPropertyChanging();
					this._dictionary_code = value;
					this.SendPropertyChanged("dictionary_code");
					this.Ondictionary_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_dictionary_phys_examination", Storage="_lab_dictionary", ThisKey="dictionary_code", OtherKey="code", IsForeignKey=true)]
		public lab_dictionary lab_dictionary
		{
			get
			{
				return this._lab_dictionary.Entity;
			}
			set
			{
				lab_dictionary previousValue = this._lab_dictionary.Entity;
				if (((previousValue != value) 
							|| (this._lab_dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lab_dictionary.Entity = null;
						previousValue.phys_examinations.Remove(this);
					}
					this._lab_dictionary.Entity = value;
					if ((value != null))
					{
						value.phys_examinations.Add(this);
						this._dictionary_code = value.code;
					}
					else
					{
						this._dictionary_code = default(string);
					}
					this.SendPropertyChanged("lab_dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visit_phys_examination", Storage="_visit", ThisKey="visit_id", OtherKey="id", IsForeignKey=true)]
		public visit visit
		{
			get
			{
				return this._visit.Entity;
			}
			set
			{
				visit previousValue = this._visit.Entity;
				if (((previousValue != value) 
							|| (this._visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._visit.Entity = null;
						previousValue.phys_examinations.Remove(this);
					}
					this._visit.Entity = value;
					if ((value != null))
					{
						value.phys_examinations.Add(this);
						this._visit_id = value.id;
					}
					else
					{
						this._visit_id = default(int);
					}
					this.SendPropertyChanged("visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.registration")]
	public partial class registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _last_name;
		
		private EntitySet<visit> _visits;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    #endregion
		
		public registration()
		{
			this._visits = new EntitySet<visit>(new Action<visit>(this.attach_visits), new Action<visit>(this.detach_visits));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[last name]", Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="registration_visit", Storage="_visits", ThisKey="id", OtherKey="registration_id")]
		public EntitySet<visit> visits
		{
			get
			{
				return this._visits;
			}
			set
			{
				this._visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="registration_user", Storage="_users", ThisKey="id", OtherKey="personel_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_visits(visit entity)
		{
			this.SendPropertyChanging();
			entity.registration = this;
		}
		
		private void detach_visits(visit entity)
		{
			this.SendPropertyChanging();
			entity.registration = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.registration = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _uname;
		
		private string _password;
		
		private string _role;
		
		private System.Nullable<System.DateTime> _expiration_date;
		
		private System.Nullable<int> _personel_id;
		
		private EntityRef<doctor> _doctor;
		
		private EntityRef<doctor> _doctor1;
		
		private EntityRef<lab> _lab;
		
		private EntityRef<lab_manager> _lab_manager;
		
		private EntityRef<registration> _registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnunameChanging(string value);
    partial void OnunameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void Onexpiration_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onexpiration_dateChanged();
    partial void Onpersonel_idChanging(System.Nullable<int> value);
    partial void Onpersonel_idChanged();
    #endregion
		
		public user()
		{
			this._doctor = default(EntityRef<doctor>);
			this._doctor1 = default(EntityRef<doctor>);
			this._lab = default(EntityRef<lab>);
			this._lab_manager = default(EntityRef<lab_manager>);
			this._registration = default(EntityRef<registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string uname
		{
			get
			{
				return this._uname;
			}
			set
			{
				if ((this._uname != value))
				{
					this.OnunameChanging(value);
					this.SendPropertyChanging();
					this._uname = value;
					this.SendPropertyChanged("uname");
					this.OnunameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expiration_date", DbType="Date")]
		public System.Nullable<System.DateTime> expiration_date
		{
			get
			{
				return this._expiration_date;
			}
			set
			{
				if ((this._expiration_date != value))
				{
					this.Onexpiration_dateChanging(value);
					this.SendPropertyChanging();
					this._expiration_date = value;
					this.SendPropertyChanged("expiration_date");
					this.Onexpiration_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personel_id", DbType="Int")]
		public System.Nullable<int> personel_id
		{
			get
			{
				return this._personel_id;
			}
			set
			{
				if ((this._personel_id != value))
				{
					if (((((this._doctor.HasLoadedOrAssignedValue || this._doctor1.HasLoadedOrAssignedValue) 
								|| this._lab.HasLoadedOrAssignedValue) 
								|| this._lab_manager.HasLoadedOrAssignedValue) 
								|| this._registration.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpersonel_idChanging(value);
					this.SendPropertyChanging();
					this._personel_id = value;
					this.SendPropertyChanged("personel_id");
					this.Onpersonel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctor_user", Storage="_doctor", ThisKey="personel_id", OtherKey="id", IsForeignKey=true)]
		public doctor doctor
		{
			get
			{
				return this._doctor.Entity;
			}
			set
			{
				doctor previousValue = this._doctor.Entity;
				if (((previousValue != value) 
							|| (this._doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctor.Entity = null;
						previousValue.users.Remove(this);
					}
					this._doctor.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._personel_id = value.id;
					}
					else
					{
						this._personel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="doctor_user1", Storage="_doctor1", ThisKey="personel_id", OtherKey="id", IsForeignKey=true)]
		public doctor doctor1
		{
			get
			{
				return this._doctor1.Entity;
			}
			set
			{
				doctor previousValue = this._doctor1.Entity;
				if (((previousValue != value) 
							|| (this._doctor1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._doctor1.Entity = null;
						previousValue.users1.Remove(this);
					}
					this._doctor1.Entity = value;
					if ((value != null))
					{
						value.users1.Add(this);
						this._personel_id = value.id;
					}
					else
					{
						this._personel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("doctor1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_user", Storage="_lab", ThisKey="personel_id", OtherKey="id", IsForeignKey=true)]
		public lab lab
		{
			get
			{
				return this._lab.Entity;
			}
			set
			{
				lab previousValue = this._lab.Entity;
				if (((previousValue != value) 
							|| (this._lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lab.Entity = null;
						previousValue.users.Remove(this);
					}
					this._lab.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._personel_id = value.id;
					}
					else
					{
						this._personel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("lab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lab_manager_user", Storage="_lab_manager", ThisKey="personel_id", OtherKey="id", IsForeignKey=true)]
		public lab_manager lab_manager
		{
			get
			{
				return this._lab_manager.Entity;
			}
			set
			{
				lab_manager previousValue = this._lab_manager.Entity;
				if (((previousValue != value) 
							|| (this._lab_manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lab_manager.Entity = null;
						previousValue.users.Remove(this);
					}
					this._lab_manager.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._personel_id = value.id;
					}
					else
					{
						this._personel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("lab_manager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="registration_user", Storage="_registration", ThisKey="personel_id", OtherKey="id", IsForeignKey=true)]
		public registration registration
		{
			get
			{
				return this._registration.Entity;
			}
			set
			{
				registration previousValue = this._registration.Entity;
				if (((previousValue != value) 
							|| (this._registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._registration.Entity = null;
						previousValue.users.Remove(this);
					}
					this._registration.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._personel_id = value.id;
					}
					else
					{
						this._personel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.patient")]
	public partial class patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _PESEL;
		
		private EntitySet<visit> _visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    #endregion
		
		public patient()
		{
			this._visits = new EntitySet<visit>(new Action<visit>(this.attach_visits), new Action<visit>(this.detach_visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="patient_visit", Storage="_visits", ThisKey="id", OtherKey="patient_id")]
		public EntitySet<visit> visits
		{
			get
			{
				return this._visits;
			}
			set
			{
				this._visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_visits(visit entity)
		{
			this.SendPropertyChanging();
			entity.patient = this;
		}
		
		private void detach_visits(visit entity)
		{
			this.SendPropertyChanging();
			entity.patient = null;
		}
	}
}
#pragma warning restore 1591
